#!/usr/bin/env python3
"""
Test script for hard mathematical problems
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏¢‡∏≤‡∏Å‡πÜ
"""

from math_solver import MathSolver
from advanced_math import AdvancedMathSolver
import json
import time

def test_hard_problems():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏¢‡∏≤‡∏Å‡πÜ ‡∏ï‡πà‡∏≤‡∏á‡πÜ"""
    
    print("="*80)
    print("üßÆ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏¢‡∏≤‡∏Å‡πÜ")
    print("="*80)
    
    solver = MathSolver()
    advanced_solver = AdvancedMathSolver()
    
    # 1. Complex Analysis Problems
    print("\nüìê 1. COMPLEX ANALYSIS PROBLEMS")
    print("-" * 50)
    
    complex_problems = [
        "residue of 1/(z^2+1) at z=i",
        "laurent series of 1/(z(z-1)) around z=0",
        "contour integral of 1/(z^2+4) around |z|=3"
    ]
    
    for i, problem in enumerate(complex_problems, 1):
        print(f"\n{i}. {problem}")
        try:
            result = advanced_solver.solve_complex_analysis(problem)
            if "error" in result:
                print(f"   ‚ùå Error: {result['error']}")
            else:
                print(f"   ‚úÖ Result: {result.get('result', result)}")
                if 'steps' in result:
                    print(f"   üìù Steps: {len(result['steps'])} steps")
        except Exception as e:
            print(f"   ‚ùå Exception: {str(e)}")
    
    # 2. Abstract Algebra Problems
    print("\nüî¢ 2. ABSTRACT ALGEBRA PROBLEMS")
    print("-" * 50)
    
    algebra_problems = [
        "order and generators of symmetric group S4",
        "is Z/6Z a field? find units and zero divisors",
        "isomorphism between Z4 and U(8)"
    ]
    
    for i, problem in enumerate(algebra_problems, 1):
        print(f"\n{i}. {problem}")
        try:
            result = advanced_solver.solve_abstract_algebra(problem)
            if "error" in result:
                print(f"   ‚ùå Error: {result['error']}")
            else:
                print(f"   ‚úÖ Result: {result.get('result', result)}")
                if 'steps' in result:
                    print(f"   üìù Steps: {len(result['steps'])} steps")
        except Exception as e:
            print(f"   ‚ùå Exception: {str(e)}")
    
    # 3. Advanced Number Theory Problems
    print("\nüî¢ 3. ADVANCED NUMBER THEORY PROBLEMS")
    print("-" * 50)
    
    number_theory_problems = [
        "zeta function at s=3",
        "class number of Q(sqrt(-7))",
        "dirichlet L-function L(1,chi) for character mod 4"
    ]
    
    for i, problem in enumerate(number_theory_problems, 1):
        print(f"\n{i}. {problem}")
        try:
            result = advanced_solver.solve_number_theory_advanced(problem)
            if "error" in result:
                print(f"   ‚ùå Error: {result['error']}")
            else:
                print(f"   ‚úÖ Result: {result.get('result', result)}")
                if 'steps' in result:
                    print(f"   üìù Steps: {len(result['steps'])} steps")
        except Exception as e:
            print(f"   ‚ùå Exception: {str(e)}")
    
    # 4. Optimization Problems
    print("\nüìà 4. OPTIMIZATION PROBLEMS")
    print("-" * 50)
    
    optimization_problems = [
        "minimize x^2+y^2 subject to x+y=1 using lagrange multipliers",
        "minimize x^2 subject to x>=2 using KKT conditions",
        "euler-lagrange equation for functional J[y]=integral(y'^2+y^2)dx"
    ]
    
    for i, problem in enumerate(optimization_problems, 1):
        print(f"\n{i}. {problem}")
        try:
            result = advanced_solver.solve_optimization(problem)
            if "error" in result:
                print(f"   ‚ùå Error: {result['error']}")
            else:
                print(f"   ‚úÖ Result: {result.get('result', result)}")
                if 'steps' in result:
                    print(f"   üìù Steps: {len(result['steps'])} steps")
        except Exception as e:
            print(f"   ‚ùå Exception: {str(e)}")
    
    # 5. Differential Geometry Problems
    print("\nüåê 5. DIFFERENTIAL GEOMETRY PROBLEMS")
    print("-" * 50)
    
    geometry_problems = [
        "gaussian curvature of sphere radius R",
        "geodesic equations on torus",
        "christoffel symbols for metric ds^2=dx^2+dy^2"
    ]
    
    for i, problem in enumerate(geometry_problems, 1):
        print(f"\n{i}. {problem}")
        try:
            result = advanced_solver.solve_differential_geometry(problem)
            if "error" in result:
                print(f"   ‚ùå Error: {result['error']}")
            else:
                print(f"   ‚úÖ Result: {result.get('result', result)}")
                if 'steps' in result:
                    print(f"   üìù Steps: {len(result['steps'])} steps")
        except Exception as e:
            print(f"   ‚ùå Exception: {str(e)}")
    
    # 6. Quantum Mechanics Problems
    print("\n‚öõÔ∏è 6. QUANTUM MECHANICS PROBLEMS")
    print("-" * 50)
    
    quantum_problems = [
        "eigenstates and energy levels of quantum harmonic oscillator",
        "commutator [x,p] and uncertainty principle",
        "wave function of particle in a box"
    ]
    
    for i, problem in enumerate(quantum_problems, 1):
        print(f"\n{i}. {problem}")
        try:
            result = advanced_solver.solve_quantum_mechanics(problem)
            if "error" in result:
                print(f"   ‚ùå Error: {result['error']}")
            else:
                print(f"   ‚úÖ Result: {result.get('result', result)}")
                if 'steps' in result:
                    print(f"   üìù Steps: {len(result['steps'])} steps")
        except Exception as e:
            print(f"   ‚ùå Exception: {str(e)}")
    
    # 7. Chaos Theory Problems
    print("\nü¶ã 7. CHAOS THEORY PROBLEMS")
    print("-" * 50)
    
    chaos_problems = [
        "lyapunov exponent of logistic map x->4x(1-x)",
        "bifurcation points of logistic map",
        "fixed points of system dx/dt=x(1-x)"
    ]
    
    for i, problem in enumerate(chaos_problems, 1):
        print(f"\n{i}. {problem}")
        try:
            result = advanced_solver.solve_chaos_theory(problem)
            if "error" in result:
                print(f"   ‚ùå Error: {result['error']}")
            else:
                print(f"   ‚úÖ Result: {result.get('result', result)}")
                if 'steps' in result:
                    print(f"   üìù Steps: {len(result['steps'])} steps")
        except Exception as e:
            print(f"   ‚ùå Exception: {str(e)}")
    
    # 8. Functional Analysis Problems
    print("\nüîç 8. FUNCTIONAL ANALYSIS PROBLEMS")
    print("-" * 50)
    
    functional_problems = [
        "spectrum of operator Tf(x)=xf(x) on L2[0,1]",
        "is operator A=[[1,2],[0,3]] hermitian?",
        "norm of vector [3,4] in Hilbert space"
    ]
    
    for i, problem in enumerate(functional_problems, 1):
        print(f"\n{i}. {problem}")
        try:
            result = advanced_solver.solve_functional_analysis(problem)
            if "error" in result:
                print(f"   ‚ùå Error: {result['error']}")
            else:
                print(f"   ‚úÖ Result: {result.get('result', result)}")
                if 'steps' in result:
                    print(f"   üìù Steps: {len(result['steps'])} steps")
        except Exception as e:
            print(f"   ‚ùå Exception: {str(e)}")
    
    print("\n" + "="*80)
    print("üéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    print("="*80)

def test_specific_problem():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"""
    
    print("\nüî¨ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞")
    print("-" * 30)
    
    solver = MathSolver()
    advanced_solver = AdvancedMathSolver()
    
    while True:
        problem = input("\n‡πÉ‡∏™‡πà‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡∏´‡∏£‡∏∑‡∏≠ 'quit' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å): ").strip()
        
        if problem.lower() in ['quit', 'exit', 'q']:
            break
            
        if not problem:
            continue
            
        print(f"\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÇ‡∏à‡∏ó‡∏¢‡πå: {problem}")
        print("-" * 50)
        
        start_time = time.time()
        
        try:
            # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ advanced solver ‡∏Å‡πà‡∏≠‡∏ô
            result = advanced_solver.solve_advanced_problem(problem)
            
            if "error" in result:
                # ‡∏ñ‡πâ‡∏≤ advanced solver ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ basic solver
                result = solver.solve_problem(problem)
            
            end_time = time.time()
            
            print(f"‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: {end_time - start_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
            
            if "error" in result:
                print(f"‚ùå Error: {result['error']}")
            else:
                print(f"‚úÖ Type: {result.get('type', 'Unknown')}")
                
                if 'result' in result:
                    print(f"üìä Result: {result['result']}")
                elif 'answer' in result:
                    print(f"üìä Answer: {result['answer']}")
                elif 'solutions' in result:
                    print(f"üìä Solutions: {result['solutions']}")
                
                if 'steps' in result and result['steps']:
                    print(f"\nüìù Solution Steps ({len(result['steps'])} steps):")
                    for i, step in enumerate(result['steps'], 1):
                        print(f"   {i}. {step}")
                
                if 'latex' in result and result['latex']:
                    print(f"\nüî§ LaTeX: {result['latex']}")
                    
        except Exception as e:
            print(f"‚ùå Exception: {str(e)}")
            import traceback
            print(traceback.format_exc())

if __name__ == "__main__":
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏¢‡∏≤‡∏Å‡πÜ")
    
    choice = input("\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:\n1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1/2): ").strip()
    
    if choice == "1":
        test_hard_problems()
    elif choice == "2":
        test_specific_problem()
    else:
        print("‚ùå ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á") 